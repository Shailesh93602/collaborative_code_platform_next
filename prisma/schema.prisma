generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String         @id @default(cuid())
  email             String         @unique
  password          String
  name              String?
  bio               String?
  projects          Project[]
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  CodeSnippet       CodeSnippet[]
  profile           UserProfile?
  followedBy        Follows[]      @relation("following")
  following         Follows[]      @relation("follower")
  emailVerified     Boolean        @default(false)
  verificationToken String?
  loginAttempts LoginAttempt[]
  twoFactorSecret    String?
  twoFactorEnabled   Boolean  @default(false)
}

model UserProfile {
  id            String         @id @default(cuid())
  userId        String         @unique
  user          User           @relation(fields: [userId], references: [id])
  avatarUrl     String?
  githubProfile String?
  twitterHandle String?
  websiteUrl    String?
  skills        String[]
}

model Follows {
  follower      User           @relation("follower", fields: [followerId], references: [id])
  followerId    String
  following     User           @relation("following", fields: [followingId], references: [id])
  followingId   String
  createdAt     DateTime       @default(now())

  @@id([followerId, followingId])
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  code        String   @db.Text
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CodeSnippet {
  id        String   @id @default(cuid())
  title     String
  code      String
  language  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model LoginAttempt {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  success   Boolean
}

model EncryptionKey {
  id        String   @id @default(cuid())
  key       String
  createdAt DateTime @default(now())
  expiresAt DateTime
}

